<?php

/**
 * Base controller class.
 *
 * @author Lukas Niederberger <lukas.niederberger@gibmit.ch>
 */
abstract class Controller {

	/**
	 * @var Request Request that generated the controller
	 */
	protected $request;

	/**
	 * @var Response Response that will be generated by the controller
	 */
	protected $response;
	
	/**
	 * Set the initial request and prepare an empty response object
	 * @param Request $request Initial request that generated the controller.
	 */
	public function __construct(Request $request)
	{
		$this->request  = $request;
		$this->response = new Response;
	}

	/**
	 * Empty standard action
	 */
	public function action_index()
	{
		
	}

	/**
	 * before method, will be called before every controller action.
	 */
	public function before()
	{

	}

	/**
	 * after method. Will be called after every controller action.
	 */
	public function after()
	{

	}

	/**
	 * Getter/Setter for the request object. 
	 * Will set a new request if an object is passed, returns the current request otherwise.
	 * @param  Request $request Request that will be set for the controller. Act as a getter if no value is passed
	 * @return Request          Current request object
	 */
	public function request(Request $request = null)
	{
		if ( is_null($request) )
		{
			return $this->request;
		}

		$this->request = $request;
	}

	/**
	 * Getter/Setter for the response object. 
	 * Will set a new response if an object is passed, returns the current response otherwise.
	 * @param  Response $response response that will be set for the controller. Act as a getter if no value is passed
	 * @return Response          Current response object
	 */
	public function response(Response $response = null)
	{
		if ( is_null($response) )
		{
			return $this->response;
		}

		$this->response = $response;
	}

	/**
	 * Execute the Controller action.
	 */
	public function execute()
	{
		return $this->response->render();
	}

}